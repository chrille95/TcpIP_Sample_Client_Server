<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="PRG_PythonServerConnect" Id="{8c786577-e66b-4a2d-8fa5-f32d131ff707}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_PythonServerConnect
VAR
	fbSocketConnect 	: FB_SocketConnect;
	fbSocketClose 		: FB_SocketClose;
	fbSocketSend 		: FB_SocketSend;
	fbSocketReceive 	: FB_SocketReceive;
	hSocket 			: T_HSOCKET;
	nConnect			: INT;
	nSend				: INT;
	nReceive			: INT;
	nClose				: INT;
	sRemoteHost			: STRING := '127.0.0.1';
	bConnect 			: BOOL;
	bClose 				: BOOL;
	bSend 				: BOOL;
	bReceive 			: BOOL;
	TON 				: TON;
	tRefreshTime 		: TIME := T#100MS;
	nSendBytes 			: ARRAY[0..1023] OF BYTE;
	nReceiveByte		: ARRAY[0..1023] OF BYTE;
	sReceiveString		: STRING;
	sSendString 		: STRING;
	nSendLen 			: UDINT;
	stReceiveString     : STRING;
	fbTRIG_ByteReceived : R_TRIG;

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Establish the connection to Python Server
fbSocketConnect(sRemoteHost := sRemoteHost, 
				nRemotePort := 65434,
				bExecute	:= bConnect,
				hSocket		=> hSocket,
				tTimeout	:= T#5S
);
IF bConnect AND (NOT(fbSocketConnect.bBusy) AND NOT(fbSocketConnect.bError)) THEN
	nConnect := nConnect + 1;
	bConnect:=FALSE;
END_IF

//Send message to Python Server & configure the Sending message
sSendString:='Hello world FROM TwinCAT!';
nSendLen:=INT_TO_UDINT(LEN(sSendString));
// Copy chars of string into byte array
MEMCPY(destAddr := ADR(nSendBytes),
	   srcAddr  := ADR(sSendString),
	   n		:= nSendLen
);
// Function Block
fbSocketSend(hSocket  := hSocket,
			 cbLen    := nSendLen,
			 pSrc     := ADR(nSendLen),
			 bExecute := bSend,
			 tTimeout := T#5S
);
IF bSend AND (NOT(fbSocketSend.bBusy) AND NOT(fbSocketSend.bError)) THEN
	nSend := nSend + 1;
	bSend:=FALSE;
END_IF

// Receive message from Python Server & refresh Timer
(*
TON(IN := NOT TON.Q,
	PT := tRefreshTime
);
*)

// Function Block
fbSocketReceive(hSocket  := hSocket,
				cbLen    := SIZEOF(nReceiveByte),
				pDest    := ADR(nReceiveByte),
				bExecute := bReceive,
				tTimeout := T#5S
);
IF bReceive AND fbSocketReceive.nRecBytes > 0 THEN
	MEMCPY(destAddr := ADR(sReceiveString),
		   srcAddr  := ADR(nReceiveByte), 
		   n        := fbSocketReceive.nRecBytes
	);	
	nReceive := nReceive + 1;
	bReceive := FALSE;
END_IF

(*
//If bytes are received
fbTRIG_ByteReceived(CLK := fbSocketReceive.nRecBytes > 0);
IF fbTRIG_ByteReceived.Q THEN
	nReceive := nReceive + 1;
	MEMCPY(destAddr := ADR(sReceiveString),
		   srcAddr  := ADR(nReceiveByte), 
		   n        := fbSocketReceive.nRecBytes
	);
END_IF
*)

//Close the Connection by Function Block
fbSocketClose(hSocket := hSocket);
IF bClose OR fbSocketSend.bError OR fbSocketReceive.bError THEN
	nClose := nClose + 1;
	bClose := FALSE;
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>